import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(req) {
  try {
    const formData = await req.formData();
    const symptoms = formData.get('symptoms');

    if (!symptoms) {
      return NextResponse.json({ error: 'Symptoms are required' }, { status: 400 });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    const url = 'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent';

    let requestBody = {
      contents: [{
        parts: [{
          text: `
            Based on the symptoms: "${symptoms}", provide a structured medical information analysis.
            
            FORMAT YOUR RESPONSE EXACTLY AS FOLLOWS:
            
            POTENTIAL CONDITIONS:
            - [Condition Name 1]: [Brief description]
            - [Condition Name 2]: [Brief description]
            
            POTENTIAL MEDICATIONS:
            - [Medication 1]: [Purpose/usage]
            - [Medication 2]: [Purpose/usage]
            
            NATURAL REMEDIES:
            - [Remedy 1]
            - [Remedy 2]
            
            LIFESTYLE MODIFICATIONS:
            - [Modification 1]
            - [Modification 2]
            
            DISCLAIMER:
            [Include standard medical disclaimer]
          `
        }]
      }]
    };

    const response = await axios.post(`${url}?key=${apiKey}`, requestBody, {
      headers: { 'Content-Type': 'application/json' },
      maxBodyLength: Infinity,
    });

    const aiResponse = response.data.candidates?.[0]?.content?.parts?.[0]?.text ?? "No response from AI.";
    
    // Format the AI response into structured HTML
    const formattedResponse = formatGeminiResponse(aiResponse, symptoms);

    return NextResponse.json({ result: formattedResponse });
  } catch (error) {
    console.error('Error calling Gemini API:', error.response?.data || error.message);
    return NextResponse.json(
      { error: 'Failed to fetch AI response', details: error.response?.data || error.message }, 
      { status: error.response?.status || 500 }
    );
  }
}

function formatGeminiResponse(text, symptoms) {
  if (!text) return null;
  
  // Create the response object with default values
  const formattedResponse = {
    title: "Medical Information Based on Symptoms",
    introduction: "This information is for educational purposes only and should not replace professional medical advice. Always consult with a healthcare provider for proper diagnosis and treatment.",
    potentialDiseases: [],
    medications: [],
    naturalRemedies: [],
    lifestyleChanges: [],
    disclaimer: "This information is generated by AI and should not be considered medical advice. Always consult a healthcare professional for diagnosis and treatment of any medical condition."
  };
  
  // Simpler parsing logic - split by sections with more flexible headings
  const sections = text.split(/\n\s*\n|\r\n\s*\r\n/);
  
  sections.forEach(section => {
    const cleanSection = section.trim();
    
    if (/potential|possible|diagnos|condition/i.test(cleanSection)) {
      const lines = cleanSection.split('\n').slice(1); // Skip the heading
      lines.forEach(line => {
        const trimmedLine = line.replace(/^[-•*\d.]\s*/, '').trim();
        if (trimmedLine) {
          const parts = trimmedLine.split(/:|–|-/, 2);
          if (parts.length > 1) {
            formattedResponse.potentialDiseases.push({
              name: parts[0].trim(),
              description: parts[1].trim()
            });
          } else {
            formattedResponse.potentialDiseases.push({
              name: trimmedLine,
              description: ""
            });
          }
        }
      });
    } else if (/medication|treatment|drug|prescribed/i.test(cleanSection)) {
      const lines = cleanSection.split('\n').slice(1);
      lines.forEach(line => {
        const trimmedLine = line.replace(/^[-•*\d.]\s*/, '').trim();
        if (trimmedLine) {
          const parts = trimmedLine.split(/:|–|-/, 2);
          if (parts.length > 1) {
            formattedResponse.medications.push({
              name: parts[0].trim(),
              description: parts[1].trim()
            });
          } else {
            formattedResponse.medications.push({
              name: trimmedLine,
              description: ""
            });
          }
        }
      });
    } else if (/natural|herbal|home remed|supplement/i.test(cleanSection)) {
      const lines = cleanSection.split('\n').slice(1);
      lines.forEach(line => {
        const trimmedLine = line.replace(/^[-•*\d.]\s*/, '').trim();
        if (trimmedLine) {
          formattedResponse.naturalRemedies.push(trimmedLine);
        }
      });
    } else if (/lifestyle|exercise|diet|habit/i.test(cleanSection)) {
      const lines = cleanSection.split('\n').slice(1);
      lines.forEach(line => {
        const trimmedLine = line.replace(/^[-•*\d.]\s*/, '').trim();
        if (trimmedLine) {
          formattedResponse.lifestyleChanges.push(trimmedLine);
        }
      });
    } else if (/disclaimer|note|warning|caution/i.test(cleanSection)) {
      formattedResponse.disclaimer = cleanSection.replace(/^.*?:/i, '').trim();
    }
  });
  
  // If nothing was extracted, add a default message
  if (formattedResponse.potentialDiseases.length === 0) {
    formattedResponse.potentialDiseases.push({
      name: "Unable to determine specific conditions",
      description: "Please provide more detailed symptoms for a better analysis."
    });
  }
  
  return formattedResponse;
}